openapi: 3.0.1
info:
  title: Local Marketplace
  description: >-
    This is set of API Endpoints for business to use our set of API's in their
    applications.
  termsOfService: '#'
  contact:
    email: ashutosh.c18@iiits.in
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Extra Information
  url: www.stackoverflow.com
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/IIITS39/Group36/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ashutosh.c18/LocalMarketplace/1.0.0
  - url: 'https://api.marketplace.local/v1'
  - url: 'http://api.marketplace.local/v1'
tags:
  - name: product
    description: Products Listing and Management
  - name: seller
    description: Seller account management
  - name: order
    description: Order management
  - name: delivery
    description: Delivery services avaiblity and listing

paths:
  /product/:
    get:
      tags:
        - product
      summary: List Products
      description: Returns all the products
      operationId: getProducts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Pet not found
          content: {}
      security:
        - api_key: []
    post:
      tags:
        - product
      summary: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Product object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '201': 
          description: Created Product entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  '/product/{productId}':
    get:
      tags:
        - product
      summary: Find Product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Pet not found
          content: {}
      security:
        - api_key: []
    put:
      tags:
        - product
      summary: Update an existing product
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: The UUID for the Product that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Product object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Product not found
          content: {}
        '405':
          description: Validation exception
          content: {}

      x-codegen-request-body-name: body
    delete:
      tags:
        - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Product not found
          content: {}
  /seller/:
    put:
      tags: [seller]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seller'
      responses:
        200:
          description: Succesfully updated the information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
      security: 
      - api_key: []
  /order:
    get:
      tags: ['order']
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            description: 'Number of orders to return'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
            description: 'Page of orders to return'
          
        - name: type
          in: query
          schema:
            type: string
            enum: ['new', 'processed', 'packed', 'transit', 'delivered']
        
      responses:
        200:
          description: List the orders for the seller
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    put:
      tags: ['order']
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Order'
      responses:
        200:
          description: Update the order status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /delivery:
    get:
      tags: ['delivery']
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            description: 'Number of delivery requests to return'
        - name: page
          in: query
          schema:
            type: integer
            format: int32
            description: 'Page of delivery requests to return'
          
        - name: type
          in: query
          schema:
            type: string
            enum: ['picked up', 'in transit', 'delivered']
        
      responses:
        200:
          description: List the delivery requests for the seller
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
    put:
      tags: ['delivery']
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Delivery'
      responses:
        200:
          description: Update the delivery requests status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'

  /user/profile:
    get:
      tags: [user]
      description: 'Get user profile'
      responses:
        200:
          description: 'User data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [user]
      description: 'Update user profile'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'User data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid4
          readOnly: true
          description: unique identifier for a Product
        name:
          type: string
          description: Name of the Product
        stock:
          type: integer
          format: int32
          description: No of Products available in stock (0) for Out-of-Stock
        price:
          type: number
          format: decimal
          description: The price of the item
        images:
          type: array
          items:
            title: url
            type: string
            description: url of the image
          description: Images of the product
        size:
          title: Size
          type: object
          description: Size of the product
          properties:
            length:
              type: number
              description: length of the product
            width:
              type: number
              description: width of the product
            height:
              type: number
              description: height of the product
        weight:
          type: number
          description: weight of the product (in grams)
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: string
          format: uuid4
        sellerId:
          type: string
          format: uuid4
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - in transit
            - delivered
        complete:
          type: boolean
          default: false
    Seller:
      type: object
      properties:
        id:
          type: string
          format: uuid4
        username:
          type: string
          readOnly: true
        firstName:
          type: string
          readOnly: true
        lastName:
          type: string
          readOnly: true
        email:
          type: string
        password:
          writeOnly: true
          type: string
        phone:
          type: string
        panCard:
          type: string
          readOnly: true
        gstId:
          type: string
          readOnly: true
      xml:
        name: Seller
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Delivery:
      type: object
      properties:
        id:
          type: string
          format: uuid4
        startDate:
          readOnly: true
          type: string
          format: datetime
        startLocation:
          readOnly: true
          $ref: '#/components/schemas/Location'

        currentLocation:
          $ref: '#/components/schemas/Location'

        deliveryLocation:
          readOnly: true
          $ref: '#/components/schemas/Location'
        
        deliveryDate:
          type: string
          format: datetime
    Location:
      type: object
      properties:
        pincode:
          type: string
        address:
          type: string
        street:
          type: string
  
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header

security: 
- api_key: []